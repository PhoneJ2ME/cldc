/*
 *
 *
 * Portions Copyright  2000-2007 Sun Microsystems, Inc. All Rights
 * Reserved.  Use is subject to license terms.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER
 * 
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version
 * 2 only, as published by the Free Software Foundation.
 * 
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * General Public License version 2 for more details (a copy is
 * included at /legal/license.txt).
 * 
 * You should have received a copy of the GNU General Public License
 * version 2 along with this work; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA
 * 
 * Please contact Sun Microsystems, Inc., 4150 Network Circle, Santa
 * Clara, CA 95054 or visit www.sun.com if you need additional
 * information or have any questions.
 *
 * Copyright 2000 Motorola, Inc. All Rights Reserved.
 * This notice does not imply publication.
 */

package com.sun.midp.rms;

import java.io.IOException;
import javax.microedition.rms.*;

import com.sun.midp.security.Permissions;
import com.sun.midp.security.SecurityToken;
import com.sun.midp.log.Logging;
import com.sun.midp.log.LogChannels;

/**
 * Class for sharing record store DB header between MIDlets. 
 * The reason why this class is needed is because we don't want 
 * to re-read the header form disk every time the record store
 * has been changed, so we share it in native instead. It is 
 * assumed that for every given suitID and record store name,
 * only one instance of this class exists per MIDlet.
 */
class RecordStoreSharedDBHeader {
    /** 
     * Cached header data, may be out of date regarding to the actual 
     * header data. This happens when another MIDlet changes the header 
     * of the same record store.
     */
    private byte[] cachedHeaderData;

    /** 
     * Internal header version. Each headerUpdated() method call
     * increments header version by 1.
     */
    private int cachedHeaderVersion;

    /** True if record store has been locked */
    boolean isRecordStoreLocked;

    /** 
     * True if if currently there are no other MIDlets who 
     * may change the header 
     */
    boolean isExclusiveUse;

    /** ID used for lookup in native code */
    private int lookupId;

    RecordStoreSharedDBHeader(int suiteId, String storeName, 
            byte[] headerData) {

        cachedHeaderData = headerData;
        lookupId = getLookupId0(suiteId, storeName, headerData.length);
        isRecordStoreLocked = false;
        isExclusiveUse = false;
        cachedHeaderVersion = 0;

        /**
         * The copy of header in native may be out-of-date regarding 
         * actual header in db file. It happens if we are going to be 
         * the second MIDlet that uses this record store. In this case, 
         * the first MIDlet didn't care about sharing header in native, 
         * because it knew that there are no others record store users. 
         * So, store the header we read from db file in native to remedy 
         * this situation.
         */
        shareCachedData();
    }

    /**
     * Called when header has been udapted.
     *
     * @param newHeaderData new header data
     */
    synchronized void headerUpdated(byte[] newHeaderData) {
        cachedHeaderData = newHeaderData;

        if (!isExclusiveUse) {
            shareCachedData();
        }
    }

    /**
     * Gets up-to-date DB header data. If header hasn't changed
     * since last call, this method guarantees to return the 
     * same byte array.
     *
     * @return actual header data
     */
    synchronized byte[] getHeaderData() {
        /*
         * Only fetch updated (possibly) header data from native if 
         * record store is unlocked. Record store being locked 
         * guarantees that no other MIDlet can change the header.
         */
        if (!isRecordStoreLocked) {
            updateCachedData();
        }

        return cachedHeaderData;
    }

    /**
     * Called after recors store has been locked.
     */
    synchronized void recordStoreLocked() {
        if (isRecordStoreLocked) {
            throw new IllegalStateException("Record store already locked");
        }

        updateCachedData();

        int refCount = getHeaderRefCount0(lookupId);
        if (refCount == 1) {
            isExclusiveUse = true;
        } else {
            isExclusiveUse = false;
        }

        isRecordStoreLocked = true;
    }

    /**
     * Called just before unlocking the record store
     */
    synchronized void recordStoreAboutToBeUnlocked() {
        isExclusiveUse = false;
        isRecordStoreLocked = false;
    }

    /**
     * Called when record store has been closed, 
     * so we can do whatever clean up we need
     */
    void recordStoreClosed() {
        cleanup0();
        lookupId = -1;
    }

    /**
     * Fetches the new header data from native.
     */
    private void updateCachedData() {
        cachedHeaderVersion = updateCachedData0(lookupId, cachedHeaderData, 
                cachedHeaderData.length, cachedHeaderVersion);
    }

    /**
     * Shares our header data in native.
     */
    private void shareCachedData() {
        cachedHeaderVersion = shareCachedData0(lookupId, cachedHeaderData, 
                cachedHeaderData.length);
    }

    /**
     * Gets lookup ID used for looking up in native.
     *
     * @param suiteId suite id
     * @param storeName record store name
     * @param headerDataSize size of the header data array, in jbytes
     * @return lookup id
     */
    private static native int getLookupId0(int suiteId, String storeName, 
            int headerDataSize);

    /**
     * Shares our copy of header data in native.
     *
     * @param lookupId lookup ID
     * @param headerData headerData
     * @param headerDataSize size of the header data array, in jbytes
     */
    private static native int shareCachedData0(int lookupId, 
            byte[] headerData, int headerDataSize);

    /**
     * Copies actual header data into specified array.
     * Note, that it only change the content of that array
     * if the actual header version is greater then specified
     * header version.
     *
     * @param lookupId lookup ID
     * @param headerData array to copy actual header data into
     * @param headerDataSize size of header data array
     * @param headerVersion version to compare actual header version with
     */
    private static native int updateCachedData0(int lookupId, 
            byte[] headerData, int headerDataSize, int headerVersion);

    /**
     * Gets header reference count. Reference count 1 means that
     * our MIDlet currently is the only MIDlet that can change this 
     * header.
     *
     * @param lookupId lookup ID
     * @return header reference count
     */
    private static native int getHeaderRefCount0(int lookupId);

    /**
     * Performs cleanup.
     */
    private native void cleanup0();

    /**
     * Ensures native resources are freed when Object is collected.
     */
// #ifdef ENABLE_CDC
    protected native void finalize();
// #else
    private native void finalize();
// #endif
    
}
