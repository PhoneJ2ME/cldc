#
#
#
# Copyright  1990-2008 Sun Microsystems, Inc. All Rights Reserved.
# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License version
# 2 only, as published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# General Public License version 2 for more details (a copy is
# included at /legal/license.txt).
#
# You should have received a copy of the GNU General Public License
# version 2 along with this work; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
# 02110-1301 USA
#
# Please contact Sun Microsystems, Inc., 4150 Network Circle, Santa
# Clara, CA 95054 or visit www.sun.com if you need additional
# information or have any questions.
#

# export ENABLE_THUMB     := true
# export ENABLE_THUMB__BY := javacall_wince_arm.cfg


host_os        = win32
host_arch      = i386
os_family      = win32
host_compiler  = visCPP
CPP_DEF_FLAGS += -DADS_LINUX_HOST=0

# manifest file that is needed to run romgen.exe file from MIDP build
ROMGEN_MANIFEST         = romgen.exe.manifest
ROMGEN_GEN_MANIFEST     = ../../romgen/app/romgen.exe.manifest

MakeDepsMain_javacall = WinGammaPlatform
MakeDepsOpts_javacall = -resolveVpath true

ifeq ($(JAVACALL_OUTPUT_DIR),)
$(error JAVACALL_OUTPUT_DIR is not set)
endif

#----------------------------------------------------------------------
# The following two flags tells jvm.make to include the alternative
# platform/compiler makefiles:
#
# $(JVMWorkSpace)/build/ads/alt_platform.make
# $(JVMWorkSpace)/build/ads/alt_compiler.make
#----------------------------------------------------------------------
# ALT_PLATFORM = ads
# ALT_COMPILER = ads

#----------------------------------------------------------------------
# LoopGen: an .exe that runs on the HOST. It has an ARM assembler loop
# generator and will generate the ARM assembler loop.
#----------------------------------------------------------------------
ifeq ($(IsLoopGen),true)
    arch               = arm
    compiler           = $(host_compiler)
    CPP_DEF_FLAGS       += /wd4996 /wd4819 -DARM=1 -DCROSS_GENERATOR=1 /wd4819 -DEVC_ASM_QUIRK=1

    export MSW_FIRST_FOR_DOUBLE     := false
    export MSW_FIRST_FOR_DOUBLE__BY := javacall_wince_arm.cfg


    ifndef ENABLE_SOFT_FLOAT
    export ENABLE_SOFT_FLOAT     := true
    export ENABLE_SOFT_FLOAT__BY := javacall_wince_arm.cfg
    endif
endif

#----------------------------------------------------------------------
# RomGen: an .exe that runs on the HOST. It has an i386 assembler or C
# loop. It runs on the HOST to generate ROMImage.cpp.
#----------------------------------------------------------------------
ifeq ($(IsRomGen),true)
    # RomGem: an .exe that runs on the HOST. It has
    # an i386 assembler loop. It runs on the HOST to
    # generate the (machine independent) ROM.cpp file.
    os_family = win32
    arch      = i386
    compiler                                 = $(host_compiler)

    export MSW_FIRST_FOR_DOUBLE     := false
    export MSW_FIRST_FOR_DOUBLE__BY := javacall_wince_arm.cfg

    export ENABLE_C_INTERPRETER             := true
    export ENABLE_C_INTERPRETER__BY         := javacall_wince_arm.cfg
    export ENABLE_INTERPRETER_GENERATOR     := false
    export ENABLE_INTERPRETER_GENERATOR__BY := javacall_wince_arm.cfg

    export TARGET_MSW_FIRST_FOR_DOUBLE     := false
    export TARGET_MSW_FIRST_FOR_DOUBLE__BY := javacall_wince_arm.cfg
    export TARGET_MSW_FIRST_FOR_LONG       := false
    export TARGET_MSW_FIRST_FOR_LONG__BY   := javacall_wince_arm.cfg
    carch                                    = arm
    iarch                                    = c
    CPP_DEF_FLAGS                           += /wd4819 /wd4996 -DARM -D_CRT_SECURE_NO_WARNINGS -DCROSS_GENERATOR=1

    copy_romgen_manifest := true
endif

#----------------------------------------------------------------------
# Target: target/bin/{cldc_hi.axf, cldc_hi_r.axf, cldc_hi_g.axf}.
# These are pure ADS/ARM binaries that run on the TARGET.
#----------------------------------------------------------------------
ifeq ($(IsTarget),true)
    # target/{cldc_hi.exe, cldc_hi_r.exe, cldc_hi_g.exe}.
    # These are pure WinCE/ARM binaries that run on the TARGET.
    os_family = javacall
    arch      = arm
    compiler  = vc8ce

    export JAVACALL_WINCE_ARM_BUILD            = true

    LOOP_GEN_FLAGS = -GenerateGNUCode +AddExternCUnderscore
    ROM_GEN_FLAGS  = +GenerateGNUCode
    # Turn off ROM and INTERPRETER generators if possible to reduce size
    # of release and product builds
    ifneq (${ENABLE_MONET}, true)
    ifndef ENABLE_ROM_GENERATOR
    export ENABLE_ROM_GENERATOR             = false
    export ENABLE_ROM_GENERATOR__BY         = javacall_wince_arm.cfg
    endif
    endif
    ifndef ENABLE_INTERPRETER_GENERATOR
    export ENABLE_INTERPRETER_GENERATOR     = false
    export ENABLE_INTERPRETER_GENERATOR__BY = javacall_wince_arm.cfg
    endif

    export ENABLE_PCSL = true

    export MSW_FIRST_FOR_DOUBLE     := false
    export MSW_FIRST_FOR_DOUBLE__BY := javacall_wince_arm.cfg

    ifeq ($(USE_DEBUG),true)
    BUILD_EXT_javacall=_g
    else
    BUILD_EXT_javacall=
    endif

    JAVACALL_INCLUDE_DIR=$(JAVACALL_OUTPUT_DIR)/inc
    JAVACALL_LIB_DIR=$(JAVACALL_OUTPUT_DIR)/lib

    CPP_DEF_FLAGS += -I"$(JAVACALL_INCLUDE_DIR)"
    CPP_DEF_FLAGS += -DARM

    LINK_FLAGS += `$(call cygpath, -w $(JAVACALL_LIB_DIR)/javacall$(BUILD_EXT_javacall).lib)`
    LINK_FLAGS += `$(call fixcygpath_m, $(JAVACALL_LIB_DIR)/cldc_javanotify_stubs.obj)`

    ifeq ($(USE_DEBUG),true)
    BUILD_EXT_javacall=_g
    else
    BUILD_EXT_javacall=
    endif

    JAVACALL_LIBS = `cygpath -m $(JAVACALL_LIB_DIR)/javacall$(BUILD_EXT_javacall).lib`

    LOOP_GEN_FLAGS         += +GenerateMicrosoftCode

    export skip_link_image := true

endif

#ifeq ($(IsProject),true)
    # project/cldc_hi.vcp, project/cldc_hi.vcw
    # These are EVC project files.
#    os_family = wince
#    arch      = arm
#    compiler  = evc
#endif

ifndef ENABLE_SOFT_FLOAT
export ENABLE_SOFT_FLOAT     := true
export ENABLE_SOFT_FLOAT__BY := javacall_wince_arm.cfg

endif
