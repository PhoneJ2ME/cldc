#
#   
#
# Copyright  1990-2009 Sun Microsystems, Inc. All Rights Reserved.
# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER
# 
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License version
# 2 only, as published by the Free Software Foundation. 
# 
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# General Public License version 2 for more details (a copy is
# included at /legal/license.txt). 
# 
# You should have received a copy of the GNU General Public License
# version 2 along with this work; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
# 02110-1301 USA 
# 
# Please contact Sun Microsystems, Inc., 4150 Network Circle, Santa
# Clara, CA 95054 or visit www.sun.com if you need additional
# information or have any questions. 
#

# Build configuration for linux platform with Thumb2EE instruction 
# set support.

export ENABLE_ARM_V7                        := true
export ENABLE_ARM_V7__BY                    := linux_jazelle_rct.cfg

export ENABLE_ARM_V6T2                      := true
export ENABLE_ARM_V6T2__BY                  := linux_jazelle_rct.cfg

export ENABLE_THUMB_VM                      := true
export ENABLE_THUMB_VM__BY                  := linux_jazelle_rct.cfg

ifndef ENABLE_SOFT_FLOAT
export ENABLE_SOFT_FLOAT                    := true
export ENABLE_SOFT_FLOAT__BY                := linux_jazelle_rct.cfg
endif

# Temporary disable the following optimization for Jazelle RCT configuration:
export ENABLE_CONDITIONAL_BRANCH_OPTIMIZATIONS     := false
export ENABLE_CONDITIONAL_BRANCH_OPTIMIZATIONS__BY := linux_jazelle_rct.cfg

export ENABLE_BRUTE_FORCE_ICACHE_FLUSH      := false
export ENABLE_BRUTE_FORCE_ICACHE_FLUSH__BY  := linux_jazelle_rct.cfg

export ENABLE_INLINE                        := false
export ENABLE_INLINE__BY                    := linux_jazelle_rct.cfg

export ENABLE_INLINED_ARRAYCOPY             := false
export ENABLE_INLINED_ARRAYCOPY__BY         := linux_jazelle_rct.cfg


# T2 and T2EE can generate smaller code without embedded callinfo
export ENABLE_EMBEDDED_CALLINFO             := false
export ENABLE_EMBEDDED_CALLINFO__BY         := linux_jazelle_rct.cfg

# Convenient setting for Sun internal use. You system may install
# the GNU tools in a different location.
#
ifndef GNU_TOOLS_DIR 
GNU_TOOLS_DIR = /usr/local/arm/2007Q1/arm-none-linux-gnueabi
endif

export ENABLE_THUMB_COMPILER               := true

export ENABLE_TIMER_THREAD                 := false
export ENABLE_TIMER_THREAD__BY             := linux_jazelle_rct.cfg

host_os                                     = linux
host_compiler                               = gcc
host_arch                                   = i386

LOOP_GEN_FLAGS = +GenerateGNUCode
ROM_GEN_FLAGS  = +GenerateGNUCode

ifeq ($(IsLoopGen),true)                                            
    # LoopGen: an a.out that runs on the HOST. It has               
    # an ARM assembler loop generator and will generate the ARM     
    # assembler loop.                                               
    os_family = linux
    arch      = thumb2
    compiler  = gcc
                                                                    
    #export MSW_FIRST_FOR_DOUBLE            := true
    #export MSW_FIRST_FOR_DOUBLE__BY        := linux_jazelle_rct.cfg
                                                                    
    #export MSW_FIRST_FOR_LONG     := true                          
    #export MSW_FIRST_FOR_LONG__BY := linux_arm.cfg                 

    CPP_DEF_FLAGS += -DARM -DCROSS_GENERATOR=1                      
endif                                                               

ifeq ($(IsRomGen),true)
    # RomGem: an .exe that runs on the HOST. It has
    # an i386 assembler loop. It runs on the HOST to
    # generate the (machine independent) ROM.cpp file.
    os_family = linux
    arch      = i386
    compiler  = gcc

    # AOT-related settings
    export ENABLE_C_INTERPRETER            := true
    export ENABLE_C_INTERPRETER__BY        := linux_jazelle_rct.cfg
    export ENABLE_INTERPRETER_GENERATOR    := false
    export ENABLE_INTERPRETER_GENERATOR__BY:= linux_jazelle_rct.cfg

    carch                                   = thumb2
    iarch                                   = c
    CPP_DEF_FLAGS                          += -DCROSS_GENERATOR=1 -DARM 
endif

ifeq ($(IsTarget),true)
    # target/{cldc_hi.axf, cldc_hi_r.axf, cldc_hi_g.axf}.
    # These are pure Linux/ARM binaries that run on the TARGET.
    os_family = linux
    arch      = thumb2
    compiler  = gcc

    ENABLE_COMPILATION_WARNINGS = true

    ifndef MERGE_SOURCE_FILES
    MERGE_SOURCE_FILES  = true
    endif

    ifndef SOURCE_MERGER_SIZE
    SOURCE_MERGER_SIZE  = 35
    endif

    CPP_DEF_FLAGS += -DARM
                                  
    THUMB_CFLAGS   = -mthumb -mthumb-interwork -mcpu=cortex-a8
    ARM_CFLAGS     = -mthumb-interwork
                                  
    ASM_FLAGS     += -mthumb-interwork
    LINK_FLAGS    += -mthumb-interwork
                                       
    ifeq ($(ENABLE_ARM_VFP),true)
    CPP_DEF_FLAGS += -mfloat-abi=softfp -mfpu=vfp3
    ASM_FLAGS += -mfpu=vfp3
    endif

    LOOP_GEN_FLAGS+= +GenerateThumbInterwork

    # We never generate the interpreter loop or ROM image on the target.
    export ENABLE_INTERPRETER_GENERATOR     := false
    export ENABLE_INTERPRETER_GENERATOR__BY := linux_jazelle_rct.cfg

    export ENABLE_ROM_GENERATOR             := false
    export ENABLE_ROM_GENERATOR__BY         := linux_jazelle_rct.cfg
endif
