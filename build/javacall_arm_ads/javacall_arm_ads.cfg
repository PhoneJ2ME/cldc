#
#
#
# Copyright  1990-2008 Sun Microsystems, Inc. All Rights Reserved.
# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER
# 
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License version
# 2 only, as published by the Free Software Foundation.
# 
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# General Public License version 2 for more details (a copy is
# included at /legal/license.txt).
# 
# You should have received a copy of the GNU General Public License
# version 2 along with this work; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
# 02110-1301 USA
# 
# Please contact Sun Microsystems, Inc., 4150 Network Circle, Santa
# Clara, CA 95054 or visit www.sun.com if you need additional
# information or have any questions.
#
# Build configuration for javacall_arm_ads.
# The build host is a Win32 
# The build target is a javacall/arm device.
# The toolchain is ARM ADS 1.2
#

#
# Rules for win32-hosted build
#
host_os        = win32
host_arch      = i386
os_family      = win32
host_compiler  = visCPP
CPP_DEF_FLAGS += -DADS_LINUX_HOST=0

MakeDepsMain_javacall = ADSPlatform
MakeDepsOpts_javacall = -resolveVpath true

ifeq ($(JAVACALL_OUTPUT_DIR),)
$(error JAVACALL_OUTPUT_DIR is not set)
endif

#----------------------------------------------------------------------
# The following two flags tells jvm.make to include the alternative
# platform/compiler makefiles:
#
# $(JVMWorkSpace)/build/ads/alt_platform.make
# $(JVMWorkSpace)/build/ads/alt_compiler.make
#----------------------------------------------------------------------
ALT_PLATFORM = ads
ALT_COMPILER = ads

ifndef ENABLE_SEGMENTED_ROM_TEXT_BLOCK
    export ENABLE_SEGMENTED_ROM_TEXT_BLOCK     := false
    export ENABLE_SEGMENTED_ROM_TEXT_BLOCK__BY := javacall_arm_ads.cfg
endif

#----------------------------------------------------------------------
# LoopGen: an .exe that runs on the HOST. It has an ARM assembler loop
# generator and will generate the ARM assembler loop.
#----------------------------------------------------------------------
ifeq ($(IsLoopGen),true)   
    arch               = arm
    compiler           = $(host_compiler)
    CPP_DEF_FLAGS      += -DARM -DCROSS_GENERATOR=1

    ifndef ENABLE_SOFT_FLOAT
    export ENABLE_SOFT_FLOAT     = true
    export ENABLE_SOFT_FLOAT__BY = javacall_arm_ads.cfg
    endif
endif

#----------------------------------------------------------------------
# RomGen: an .exe that runs on the HOST. It has an i386 assembler or C
# loop. It runs on the HOST to generate ROMImage.cpp.
#----------------------------------------------------------------------
ifeq ($(IsRomGen),true)

    export ENABLE_C_INTERPRETER             := true
    export ENABLE_C_INTERPRETER__BY         := javacall_arm_ads.cfg
    export ENABLE_INTERPRETER_GENERATOR     := false
    export ENABLE_INTERPRETER_GENERATOR__BY := javacall_arm_ads.cfg
    # SOFT_FLOAT is enabled to have GP offsets in romgen the same as
    # those at run-time.
    ifndef ENABLE_SOFT_FLOAT
    export ENABLE_SOFT_FLOAT                := true
    export ENABLE_SOFT_FLOAT__BY            := javacall_arm_ads.cfg
    endif
    override arch                           := c
    carch                                    = arm
    iarch                                    = c
    CPP_DEF_FLAGS                           += -DARM -DCROSS_GENERATOR=1

    compiler                                 = $(host_compiler)
    ROM_GEN_FLAGS                            =


    ifeq ($(ADS_CYGWIN_HOST), true)
        LOOP_GEN_ARG   = +GenerateGNUCode  +AddExternCUnderscore \
                         +GenerateAssemblyCode
    endif

    ifneq ($(ADS_BIG_ENDIAN_TARGET), "true")
    export TARGET_MSW_FIRST_FOR_LONG        := false
    export TARGET_MSW_FIRST_FOR_LONG__BY    := javacall_arm_ads.cfg
    export TARGET_MSW_FIRST_FOR_DOUBLE      := false
    export TARGET_MSW_FIRST_FOR_DOUBLE__BY  := javacall_arm_ads.cfg
    endif
endif

#----------------------------------------------------------------------
# Target: target/bin/{cldc_hi.axf, cldc_hi_r.axf, cldc_hi_g.axf}.
# These are pure ADS/ARM binaries that run on the TARGET.
#----------------------------------------------------------------------
ifeq ($(IsTarget),true)
    os_family = javacall
    arch      = arm
    compiler  = ads

    # Turn off ROM and INTERPRETER generators if possible to reduce size
    # of release and product builds
    ifneq ($(ENABLE_MONET), true)
    ifndef ENABLE_ROM_GENERATOR
    export ENABLE_ROM_GENERATOR             = false
    export ENABLE_ROM_GENERATOR__BY         = javacall_arm_ads.cfg
    endif
    endif
    ifndef ENABLE_INTERPRETER_GENERATOR
    export ENABLE_INTERPRETER_GENERATOR     = false
    export ENABLE_INTERPRETER_GENERATOR__BY = javacall_arm_ads.cfg
    endif

    ifndef ENABLE_SOFT_FLOAT
    export ENABLE_SOFT_FLOAT     = true
    export ENABLE_SOFT_FLOAT__BY = javacall_arm_ads.cfg
    endif

    ifndef MERGE_SOURCE_FILES
           MERGE_SOURCE_FILES  = true
    endif

    ifndef SOURCE_MERGER_SIZE
           SOURCE_MERGER_SIZE  = 35
    endif

    ifeq ($(ENABLE_THUMB_VM), true)
        LOOP_GEN_FLAGS += +GenerateThumbInterwork
    endif

    ifeq ($(ENABLE_SOFT_FLOAT), true)
        CPP_DEF_FLAGS +=
        LINK_FLAGS    += 
    endif

    # Always disable timer thread on ads
    export ENABLE_TIMER_THREAD     := false
    export ENABLE_TIMER_THREAD__BY := javacall_arm_ads.cfg

    ENABLE_PCSL = true
    export ENABLE_PCSL := true

    export skip_link_image := true

    JAVACALL_INCLUDE_DIR=$(JAVACALL_OUTPUT_DIR)/inc

    CPP_DEF_FLAGS += -I$(JAVACALL_INCLUDE_DIR) 

    JC_STUBS_OBJ = $(JAVACALL_LIB_DIR)/cldc_javanotify_stubs.o
endif


