#
#   
#
# Copyright  1990-2008 Sun Microsystems, Inc. All Rights Reserved.
# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER
# 
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License version
# 2 only, as published by the Free Software Foundation.
# 
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# General Public License version 2 for more details (a copy is
# included at /legal/license.txt).
# 
# You should have received a copy of the GNU General Public License
# version 2 along with this work; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
# 02110-1301 USA
# 
# Please contact Sun Microsystems, Inc., 4150 Network Circle, Santa
# Clara, CA 95054 or visit www.sun.com if you need additional
# information or have any questions.
#

# Build configuration for javacall_iphone_i386. javacall_iphone_i386 
# is intended to validate the C interpreter loop, not as a product platform.

export ENABLE_C_INTERPRETER     := true
export ENABLE_C_INTERPRETER__BY := javacall_iphone_i386.cfg

CPP_DEF_FLAGS += -I$(PCSL_OUTPUT_DIR)/javacall_i386/inc
PCSL_DIST_DIR = $(PCSL_OUTPUT_DIR)/javacall_i386

host_os   = darwin
host_arch = i386
target_arch = darwin
target_platform = darwin_javacall
os_family = linux
compiler  = gcc
arch      = c

LOOP_GEN_FLAGS = +GenerateGNUCode
ROM_GEN_FLAGS  = +GenerateGNUCode

CPP_DEF_FLAGS += -DDARWIN
LINK_FLAGS    +=

ifndef ENABLE_TIMER_THREAD
export ENABLE_TIMER_THREAD = true
export ENABLE_TIMER_THREAD__BY = javacall_darwin_i386.cfg
endif

export ENABLE_INTERPRETER_GENERATOR     := false
export ENABLE_INTERPRETER_GENERATOR__BY := javacall_darwin_i386.cfg

export ENABLE_COMPILER                  := false
export ENABLE_COMPILER__BY              := javacall_darwin_i386.cfg

ifeq ($(IsRomGen),true)
    # RomGem: an a.out that runs on the HOST. It has
    # C interpreter loop. It runs on the HOST to
    # generate the (machine independent) ROM.cpp file.
    os_family = linux
    arch      = c
    compiler  = gcc
endif

ifeq ($(IsTarget),true)
    # target/{cldc_vm, cldc_vm_r, cldc_vm_g}.
    # These are pure Linux/ARM binaries that run on the TARGET.

    export ENABLE_PCSL = true

    target_platform = darwin_javacall
    os_family = javacall
    arch      = i386
    iarch     = c
    compiler  = gcc

    JAVACALL_INCLUDE_DIR=$(JAVACALL_OUTPUT_DIR)/inc
    JAVACALL_LIB_DIR=$(JAVACALL_OUTPUT_DIR)/lib

    ifeq ($(USE_DEBUG),true)
    BUILD_EXT_javacall=_g
    else
    BUILD_EXT_javacall=
    endif

    CPP_DEF_FLAGS += -I"$(JAVACALL_INCLUDE_DIR)"
    LINK_FLAGS += "$(JAVACALL_LIB_DIR)/libjavacall$(BUILD_EXT_javacall).a"
    JC_STUBS_OBJ = "$(JAVACALL_LIB_DIR)/cldc_javanotify_stubs.o"

    # Turn off ROM and INTERPRETER generators if possible to reduce size
    # of release and product builds
    ifneq (${ENABLE_MONET}, true)
    ifndef ENABLE_ROM_GENERATOR
    export ENABLE_ROM_GENERATOR             = false
    export ENABLE_ROM_GENERATOR__BY         = javacall_darwin_i386.cfg
    endif
    endif
    ifndef ENABLE_INTERPRETER_GENERATOR
    export ENABLE_INTERPRETER_GENERATOR     = false
    export ENABLE_INTERPRETER_GENERATOR__BY = javacall_darwin_i386.cfg
    endif

    #export MSW_FIRST_FOR_DOUBLE     := false
    #export MSW_FIRST_FOR_DOUBLE__BY := javacall_darwin_i386.cfg

    CPP_DEF_FLAGS += -DLINUX -DDARWIN
    
    ifeq ($(ENABLE_SOFT_FLOAT), true)
        ifneq ($(ENABLE_ARM_VFP), true)
            CPP_DEF_FLAGS += -msoft-float
            ASM_FLAGS += -mno-fpu
            LINK_FLAGS += -Xlinker --no-warn-mismatch
        endif
    endif
endif

ifndef MERGE_SOURCE_FILES
MERGE_SOURCE_FILES  = true
endif

ifndef SOURCE_MERGER_SIZE
SOURCE_MERGER_SIZE  = 35
endif
