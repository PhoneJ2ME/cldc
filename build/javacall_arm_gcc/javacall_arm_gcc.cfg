#
# @(#)linux_arm.cfg	1.23 06/01/26 12:30:47
#
# Copyright © 2006 Sun Microsystems, Inc. All rights reserved.
# SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
#

# Build configuration for linux_arm. Since this is a self hosted
# build (see definition of IsSelfHosted in ./Makefile), the
# definitions of the following 6 configuration variables are the same
# for IsRomGen, IsLoopGen, and IsTarget.
#
# See ../linux_arm/linux_arm.cfg for an example of a non-self hosted
# configuration file, which is more typical.

# WARNING: This file is altered to be executed in Scratchbox2
#          target emulation environment.

host_os   = linux
os_family = javacall
arch      = arm
compiler  = gcc

host_arch      = arm
#os_family      = $(host_os)
arch           = $(host_arch)

ifeq ($(JAVACALL_OUTPUT_DIR),)
$(error JAVACALL_OUTPUT_DIR is not set)
endif

CPP_DEF_FLAGS += -I$(PCSL_OUTPUT_DIR)/javacall_arm/inc

PCSL_DIST_DIR = $(PCSL_OUTPUT_DIR)/javacall_arm

MakeDepsMain_javacall = UnixPlatform
MakeDepsOpts_javacall = -resolveVpath true

LOOP_GEN_FLAGS = +GenerateGNUCode
ROM_GEN_FLAGS  = +GenerateGNUCode

VERBOSE_MAKE=true

ifndef ENABLE_TIMER_THREAD
ENABLE_TIMER_THREAD = true
export ENABLE_TIMER_THREAD__BY = javacall_arm_gcc.cfg
endif

ifndef MERGE_SOURCE_FILES
MERGE_SOURCE_FILES  = true
endif

ifndef SOURCE_MERGER_SIZE
SOURCE_MERGER_SIZE  = 35
endif

# ifneq ($(ENABLE_FLOAT), false)
# ifndef ENABLE_SOFT_FLOAT
# export ENABLE_SOFT_FLOAT     = true
# export ENABLE_SOFT_FLOAT__BY = linux_arm.cfg
# # export ENABLE_ARM_VFP        = true
# # export ENABLE_ARM_VFP__BY    = linux_arm.cfg
# endif
# endif

ifeq ($(IsLoopGen),true)
    # LoopGen: an .exe that runs on the HOST. It has
    # an arm assembler loop generator and will generate the arm
    # assembler loop.
    os_family          = $(host_os)
endif

ifeq ($(IsRomGen),true)
    # RomGem: an .exe that runs on the HOST. It has
    # an arm assembler or C loop. It runs on the HOST to
    # generate the (machine independent) ROM.cpp file.
    os_family      = $(host_os)

#      export ENABLE_INTERPRETER_GENERATOR    := false
#      export ENABLE_INTERPRETER_GENERATOR__BY:= linux_arm.cfg

    # Since the attempt to to build native ARM generator failed
    # Scratchbox ability to build and execute host binaries
    # is exploited here. Requires to patch jvm.make
    # in order for it to not overwrite GCC_PREFIX_i386 value
    GCC_PREFIX_i386 = host-
    arch           = c
    host_arch      = i386
        export MSW_FIRST_FOR_DOUBLE     := false
        export MSW_FIRST_FOR_DOUBLE__BY := linux_arm.cfg
        export ENABLE_C_INTERPRETER            := true
    export ENABLE_C_INTERPRETER__BY        := linux_arm.cfg
    export ENABLE_INTERPRETER_GENERATOR    := false
    export ENABLE_INTERPRETER_GENERATOR__BY:= linux_arm.cfg
    export TARGET_MSW_FIRST_FOR_DOUBLE     := true
    export TARGET_MSW_FIRST_FOR_DOUBLE__BY := linux_arm.cfg
    export TARGET_MSW_FIRST_FOR_LONG       := false
    export TARGET_MSW_FIRST_FOR_LONG__BY   := linux_arm.cfg
    carch                                   = arm
    iarch                                   = c
    CPP_DEF_FLAGS                          += -DARM -DCROSS_GENERATOR=1

endif

ifeq ($(IsTarget),true)

    # target/{cldc_vm, cldc_vm_r, cldc_vm_g}.
    # These are pure Linux/ARM binaries that run on the TARGET.
    target_platform = linux_javacall

    JAVACALL_INCLUDE_DIR=$(JAVACALL_OUTPUT_DIR)/inc
    JAVACALL_LIB_DIR=$(JAVACALL_OUTPUT_DIR)/lib

    export MSW_FIRST_FOR_DOUBLE     := true
    export MSW_FIRST_FOR_DOUBLE__BY := linux_arm.cfg

    CPP_DEF_FLAGS += -DARM -DNO_STDINT

    ifndef ENABLE_INTERPRETER_GENERATOR
    export ENABLE_INTERPRETER_GENERATOR     = false
    export ENABLE_INTERPRETER_GENERATOR__BY = linux_arm.cfg
    endif

    ifeq ($(ENABLE_SOFT_FLOAT), true)
        ifneq ($(ENABLE_ARM_VFP), true)
            CPP_DEF_FLAGS += -msoft-float
            ASM_FLAGS += -mno-fpu
            LINK_FLAGS += -Xlinker --no-warn-mismatch
        endif
    endif

    export ENABLE_PCSL = true

#    export skip_link_image := true

    JAVACALL_INCLUDE_DIR=$(JAVACALL_OUTPUT_DIR)/inc

    CPP_DEF_FLAGS += -I$(JAVACALL_INCLUDE_DIR) -DLINUX

    JC_STUBS_OBJ = $(JAVACALL_LIB_DIR)/cldc_javanotify_stubs.o
endif


#export skip_link_image := true
#export BUILD_ANI_LIB := true
